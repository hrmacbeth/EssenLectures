/-  Author:  S√©bastien Gou√´zel   sebastien.gouezel@univ-rennes1.fr
    License: BSD -/
import Mathlib.Topology.MetricSpace.Basic
import Mathlib.Topology.UniformSpace.Completion

/-! # TODO Missing geodesic space theory -/

open Metric

open UniformSpace in
@[elab_as_elim]
theorem UniformSpace.Completion.induction_on‚ÇÑ [UniformSpace Œ±] [UniformSpace Œ≤] [UniformSpace Œ≥] [UniformSpace Œ¥]
    {p : Completion Œ± ‚Üí Completion Œ≤ ‚Üí Completion Œ≥ ‚Üí Completion Œ¥ ‚Üí Prop}
    (a : Completion Œ±) (b : Completion Œ≤) (c : Completion Œ≥) (d : Completion Œ¥)
    (hp : IsClosed { x : Completion Œ± √ó Completion Œ≤ √ó Completion Œ≥ √ó Completion Œ¥ | p x.1 x.2.1 x.2.2.1 x.2.2.2 })
    (ih : ‚àÄ (a : Œ±) (b : Œ≤) (c : Œ≥) (d : Œ¥), p a b c d) : p a b c d :=
  sorry

def quasi_isometry_on (lambda C : ‚Ñù) {X Y : Type*} [MetricSpace X] [MetricSpace Y] (s : Set X) (f : X ‚Üí Y) : Prop := sorry

def proj_set {X : Type*} [MetricSpace X] (x : X) (s : Set X) : Set X := sorry

lemma proj_setD [MetricSpace X] {x y : X} {s : Set X} (hxy : x ‚àà proj_set y s) : x ‚àà s := sorry

def geodesic_segment {X : Type*} [MetricSpace X] (s : Set X) : Prop := sorry

def geodesic_segment_between {X : Type*} [MetricSpace X] (s : Set X) (x y : X) : Prop := sorry

lemma some_geodesic_segment_between_exists (X : Type*) [MetricSpace X]
    [‚àÄ x y : X, ‚àÄ S : Set X, Decidable (‚àÉ G, geodesic_segment_between G x y ‚àß G ‚äÜ S)] :
    ‚àÉ f : X ‚Üí Set X ‚Üí X ‚Üí Set X, ‚àÄ x y S, f x S y = f y S x
    ‚àß  (if (‚àÉ G, geodesic_segment_between G x y ‚àß G ‚äÜ S) then
          (geodesic_segment_between (f x S y) x y ‚àß (f x S y ‚äÜ S))
        else
          f x S y = {x, y}) :=
  sorry

def some_geodesic_segment_between {X : Type*} [MetricSpace X]
    [‚àÄ x y : X, ‚àÄ S : Set X, Decidable (‚àÉ G, geodesic_segment_between G x y ‚àß G ‚äÜ S)]
    (x y : X) (S : Set X) : Set X :=
  (some_geodesic_segment_between_exists X).choose x S y

set_option quotPrecheck false in
notation "{" x "‚Äí" S "‚Äí" y "}" => some_geodesic_segment_between x y S

abbrev some_geodesic_segment_between_UNIV {X : Type*} [MetricSpace X]
    [‚àÄ x y : X, ‚àÄ S : Set X, Decidable (‚àÉ G, geodesic_segment_between G x y ‚àß G ‚äÜ S)]
    (x y : X) : Set X :=
  {x‚Äí(@Set.univ X)‚Äíy}

set_option quotPrecheck false in
notation "{" x "‚Äí" y "}" => some_geodesic_segment_between_UNIV x y

def geodesic_segment_param {X : Type*} [MetricSpace X] (G : Set X) (x : X) (t : ‚Ñù) : X := sorry

-- note: made up this name, it was recorded as geodesic_segment_param(6)
theorem dist_geodesic_segment_param {X : Type*} [MetricSpace X] (G : Set X) (x : X) (t : ‚Ñù) :
    dist x (geodesic_segment_param G x t) ‚â§ t :=
  sorry

class GeodesicSpace (X : Type*) [MetricSpace X]

-- **Lemma 2.1**
-- `quasi_geodesic_made_lipschitz`

-- `infDist_almost_attained`
-- `infDist_proper_attained`
-- `proj_set_dist_le`
-- `geodesic_segment_topology`
-- `geodesic_subsegment_exists`

open Set Topology in
-- there must be a better way! check the library
theorem method_of_continuity {a b : ‚Ñù} (hab : a ‚â§ b) {P : ‚Ñù ‚Üí Prop} (hPa : P a) :
    ‚àÉ u ‚àà Icc a b, (‚àÄ s ‚àà Ico a u, P s) ‚àß (u < b ‚Üí ‚àÉ·∂† s in ùìù[‚â•] u, ¬¨ P s) := by
  let I : Set ‚Ñù := Icc a b ‚à© {t | ‚àÄ s ‚àà Icc a t, P s}
  have haI : a ‚àà I := by
    refine ‚ü®by aesop, ?_‚ü©
    intro s hs
    obtain rfl : s = a := by simpa using hs
    aesop
  have : BddAbove I := BddAbove.inter_of_left bddAbove_Icc
  let u := sSup I
  have hau : a ‚â§ u := le_csSup this haI
  have A : ‚àÄ s ‚àà Ico a u, P s := by
    intro s hs
    obtain ‚ü®t, htI, hts‚ü© : ‚àÉ t ‚àà I, s < t := exists_lt_of_lt_csSup ‚ü®_, haI‚ü© hs.2
    exact htI.2 _ ‚ü®hs.1, hts.le‚ü©
  refine ‚ü®u, ‚ü®hau, csSup_le ‚ü®_, haI‚ü© <| by aesop‚ü©, A, ?_‚ü©
  intro hub
  rw [Filter.frequently_iff]
  intro s hs
  rw [mem_nhdsWithin_Ici_iff_exists_Icc_subset] at hs
  obtain ‚ü®e, he, heus‚ü© := hs
  have hu_lt : u < min b e := lt_min hub he
  have hmin_mem : min b e ‚àà Icc a b := ‚ü®hau.trans hu_lt.le, min_le_left _ _‚ü©
  have h := not_mem_of_csSup_lt hu_lt (by assumption)
  change ¬¨ (_ ‚àß ‚àÄ _, _) at h
  push_neg at h
  obtain ‚ü®x, hx1, hx2‚ü© := h hmin_mem
  refine ‚ü®x, heus ‚ü®?_, hx1.2.trans (min_le_right ..)‚ü©, hx2‚ü©
  by_contra! hxu
  have := A x ‚ü®hx1.1, hxu‚ü©
  exact hx2 this
